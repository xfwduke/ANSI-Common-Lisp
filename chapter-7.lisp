(defun read-file (file-path)
  (with-open-file (f file-path :direction :input)
    (do ((c (read-char f nil 'eof)
	       (read-char f nil 'eof)))
	((eql c 'eof))
      (format t "~A" c))))

(defun seek-token (file-path token alter-token)
  (let ((buffer (make-string (length token))) (token-idx 0))
    (with-open-file (f file-path :direction :input)
      (do ((c (read-char f nil 'eof) (read-char f nil 'eof)))
	  ((eql c 'eof))
	(if (char= c (elt token token-idx))
	    (progn
	      (setf (aref buffer token-idx) c)
	      (incf token-idx)
	      (when (= (length token) token-idx)
		(format t "~A" alter-token)
		(setf buffer (make-string (length token)))
		(setf token-idx 0)))
	    (progn
	      (when (> token-idx 0)
		  (format t "~A" (subseq buffer 0 token-idx))
		  (setf buffer (make-string (length token)))
		  (setf token-idx 0))
	      (format t "~A" c)))))))
